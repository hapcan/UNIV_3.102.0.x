include "global.tbh"


public dim error_mode as no_yes
public dim quick_init_flag as quick_init_states


'--------------------------------------------------------------------
sub callback_stg_error(byref stg_name_or_num as string,index as byte,status as en_stg_status_codes)
	error_mode=YES
end sub

'--------------------------------------------------------------------
sub callback_stg_pre_get(byref stg_name_or_num as string,index as byte,byref stg_value as string)
end sub

'--------------------------------------------------------------------
sub callback_stg_post_set(byref stg_name_or_num as string, index as byte,byref stg_value as string)
end sub

'--------------------------------------------------------------------
sub close_interface_sockets(interface as pl_sock_interfaces)
	dim f,sock_num_bup as byte
	dim i as word
	
	sock_num_bup=sock.num
	
	for f=0 to sock.numofsock-1
		sock.num=f
		if sock.currentinterface=interface and sock.statesimple<>PL_SSTS_CLOSED then
			sock.discard
		end if
	next f

	i=sys.timercount

wait_close_interface_sockets:
	for f=0 to sock.numofsock-1
		sock.num=f
		if sock.currentinterface=interface and sock.statesimple<>PL_SSTS_CLOSED and sys.timercount-i<3 and sys.timercount>=i then
			goto wait_close_interface_sockets
		end if
	next f

	sock.num=sock_num_bup
end sub



'--------------------------------------------------------------------
public function proc_device_op(s as string(1)) as string(1)
	dim temp as string
	select case s
	case "I":
		select case stg_restore_multiple(EN_STG_INIT_MODE_NORMAL)
		case EN_STG_STATUS_OK:
			
		case else:
			sys.halt
		end select
	end select
goto reply_null

reply_rejected:
	proc_device_op="R"
	goto finish
reply_err:
	proc_device_op="C"
	goto finish
reply_denied:
	proc_device_op="D"
	goto finish
reply_failed:
	proc_device_op="F"
	goto finish
reply_ok:
	proc_device_op="A"
	goto finish	
finish:
reply_null:

end function

'--------------------------------------------------------------------
public sub device_setting_set(sname as string(STG_MAX_SETTING_NAME_LEN), index as byte, s as string)
	'********** ADDITIONAL CODE MAY BE NEEDED **********
end sub

'--------------------------------------------------------------------
public function device_setting_check(byref setting_name as string,byref setting_val as string) as ok_ng
	'********** ADDITIONAL CODE MAY BE NEEDED **********
	device_setting_check = OK
end function 

'--------------------------------------------------------------------
public function device_spec_arg_sg(byref setting_name as string, byref setting_val as string, byref stg_num as byte, rw as en_stg_rdwr) as en_stg_status_codes
	'********** ADDITIONAL CODE MAY BE NEEDED **********
	device_spec_arg_sg = EN_STG_STATUS_OK
end function




